// Code generated by protoc-gen-go. DO NOT EDIT.
// source: bazil.org/bazil/server/control/wire/control.proto

package wire

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PingRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingRequest) Reset()         { *m = PingRequest{} }
func (m *PingRequest) String() string { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()    {}
func (*PingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_225e4c08a400f555, []int{0}
}

func (m *PingRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PingRequest.Unmarshal(m, b)
}
func (m *PingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PingRequest.Marshal(b, m, deterministic)
}
func (m *PingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingRequest.Merge(m, src)
}
func (m *PingRequest) XXX_Size() int {
	return xxx_messageInfo_PingRequest.Size(m)
}
func (m *PingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PingRequest proto.InternalMessageInfo

type PingResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingResponse) Reset()         { *m = PingResponse{} }
func (m *PingResponse) String() string { return proto.CompactTextString(m) }
func (*PingResponse) ProtoMessage()    {}
func (*PingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_225e4c08a400f555, []int{1}
}

func (m *PingResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PingResponse.Unmarshal(m, b)
}
func (m *PingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PingResponse.Marshal(b, m, deterministic)
}
func (m *PingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingResponse.Merge(m, src)
}
func (m *PingResponse) XXX_Size() int {
	return xxx_messageInfo_PingResponse.Size(m)
}
func (m *PingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PingResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*PingRequest)(nil), "bazil.control.PingRequest")
	proto.RegisterType((*PingResponse)(nil), "bazil.control.PingResponse")
}

func init() {
	proto.RegisterFile("bazil.org/bazil/server/control/wire/control.proto", fileDescriptor_225e4c08a400f555)
}

var fileDescriptor_225e4c08a400f555 = []byte{
	// 413 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0xd1, 0x4e, 0xfa, 0x30,
	0x14, 0xc6, 0xff, 0x17, 0x04, 0xfe, 0x29, 0xa0, 0xa6, 0x97, 0x18, 0x8d, 0x4c, 0xc5, 0x3b, 0xa6,
	0xf2, 0x04, 0xc8, 0x85, 0x89, 0x68, 0x42, 0x5c, 0x42, 0xa2, 0xf1, 0x66, 0x1b, 0x27, 0x73, 0x71,
	0xb6, 0xd8, 0x75, 0x90, 0xf9, 0x8e, 0xbe, 0x93, 0xd9, 0xba, 0xce, 0x6e, 0x74, 0x63, 0x77, 0xb4,
	0xdf, 0xf7, 0xfd, 0x4e, 0x7b, 0x0e, 0x2b, 0xba, 0x71, 0xec, 0x6f, 0x3f, 0x18, 0x53, 0xe6, 0x99,
	0xe9, 0x2f, 0x33, 0x04, 0xb6, 0x01, 0x66, 0xba, 0x94, 0x70, 0x46, 0x03, 0x73, 0xeb, 0x33, 0x90,
	0x8b, 0xf1, 0x9a, 0x51, 0x4e, 0x71, 0x5f, 0x44, 0xb2, 0xcd, 0xc1, 0x75, 0x13, 0xc2, 0x86, 0x06,
	0xd1, 0x27, 0x08, 0xc0, 0xa0, 0x51, 0xcd, 0xf0, 0xdd, 0x66, 0x3e, 0xf1, 0xb2, 0xc8, 0xb8, 0x49,
	0x64, 0x0d, 0xc0, 0x32, 0xff, 0xa4, 0x91, 0x3f, 0x72, 0x02, 0xdf, 0xfd, 0x80, 0x58, 0x84, 0x8c,
	0x3e, 0xea, 0x2e, 0x7c, 0xe2, 0x3d, 0xc3, 0x57, 0x04, 0x21, 0x37, 0x0e, 0x50, 0x4f, 0x2c, 0xc3,
	0x35, 0x25, 0x21, 0xdc, 0xfe, 0xfc, 0x47, 0x9d, 0x99, 0xc8, 0xe3, 0x29, 0x6a, 0x25, 0x1a, 0x96,
	0x07, 0x93, 0x1d, 0x52, 0xf2, 0x83, 0x63, 0xad, 0x26, 0x60, 0xc6, 0x3f, 0xfc, 0x82, 0x7a, 0x8b,
	0xf4, 0x00, 0x73, 0x88, 0xef, 0x81, 0x63, 0xa3, 0x6c, 0x57, 0x44, 0x89, 0x3c, 0xaf, 0xf5, 0xa8,
	0xe8, 0x65, 0xda, 0xf0, 0x19, 0x03, 0x9b, 0xc3, 0x0e, 0x5a, 0x15, 0xab, 0xd0, 0x45, 0x4f, 0x8e,
	0x7e, 0x43, 0xfd, 0x4c, 0xa1, 0x84, 0x80, 0xcb, 0x71, 0x45, 0x4e, 0xa8, 0x12, 0x7e, 0x51, 0x6f,
	0xca, 0xe9, 0x4b, 0xd4, 0x15, 0xd2, 0x13, 0x8d, 0x08, 0xc7, 0x43, 0x6d, 0x2c, 0xd5, 0x24, 0xd9,
	0xa8, 0xb3, 0xe4, 0x5c, 0x40, 0x47, 0x42, 0xb0, 0x38, 0x65, 0xb6, 0x07, 0xd3, 0xd5, 0x0a, 0x8f,
	0xb4, 0xc9, 0x3f, 0x83, 0xac, 0x70, 0xb5, 0xd7, 0x97, 0x97, 0xb1, 0x10, 0xca, 0xd4, 0x98, 0xb8,
	0xf8, 0x4c, 0x1f, 0x8c, 0x89, 0x2b, 0xd1, 0xc3, 0x1a, 0x87, 0xda, 0x71, 0x4b, 0x7c, 0x0b, 0x73,
	0x88, 0x93, 0x83, 0x97, 0x3b, 0x5e, 0x50, 0xab, 0x3a, 0x5e, 0x32, 0xe5, 0xf4, 0x07, 0xd4, 0x59,
	0x00, 0xb0, 0x84, 0x7b, 0x52, 0xfe, 0x73, 0x89, 0x7d, 0x49, 0x3c, 0xad, 0x92, 0x73, 0x96, 0x83,
	0x0e, 0x93, 0xcd, 0x47, 0xea, 0xda, 0xdc, 0xa7, 0xc4, 0x02, 0x8e, 0x2f, 0x35, 0x21, 0x45, 0x97,
	0xec, 0xd1, 0x3e, 0x9b, 0x3a, 0xc9, 0x44, 0x94, 0xed, 0x0f, 0x02, 0xba, 0xc5, 0xba, 0xb4, 0x6a,
	0xa8, 0x9a, 0xe4, 0xae, 0xaf, 0x7c, 0x15, 0x31, 0x10, 0x51, 0x45, 0x77, 0x15, 0x45, 0xaf, 0xbb,
	0x4a, 0xc1, 0x26, 0x6b, 0xdc, 0xb5, 0x5f, 0x5b, 0xc9, 0x33, 0xe4, 0xb4, 0xd3, 0xd7, 0x67, 0xf2,
	0x1b, 0x00, 0x00, 0xff, 0xff, 0x60, 0xd7, 0xbf, 0x47, 0x8b, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ControlClient is the client API for Control service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ControlClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	PublicKeyGet(ctx context.Context, in *PublicKeyGetRequest, opts ...grpc.CallOption) (*PublicKeyGetResponse, error)
	VolumeCreate(ctx context.Context, in *VolumeCreateRequest, opts ...grpc.CallOption) (*VolumeCreateResponse, error)
	VolumeConnect(ctx context.Context, in *VolumeConnectRequest, opts ...grpc.CallOption) (*VolumeConnectResponse, error)
	VolumeMount(ctx context.Context, in *VolumeMountRequest, opts ...grpc.CallOption) (*VolumeMountResponse, error)
	VolumeStorageAdd(ctx context.Context, in *VolumeStorageAddRequest, opts ...grpc.CallOption) (*VolumeStorageAddResponse, error)
	VolumeSync(ctx context.Context, in *VolumeSyncRequest, opts ...grpc.CallOption) (*VolumeSyncResponse, error)
	SharingKeyAdd(ctx context.Context, in *SharingKeyAddRequest, opts ...grpc.CallOption) (*SharingKeyAddResponse, error)
	PeerAdd(ctx context.Context, in *PeerAddRequest, opts ...grpc.CallOption) (*PeerAddResponse, error)
	PeerLocationSet(ctx context.Context, in *PeerLocationSetRequest, opts ...grpc.CallOption) (*PeerLocationSetResponse, error)
	PeerStorageAllow(ctx context.Context, in *PeerStorageAllowRequest, opts ...grpc.CallOption) (*PeerStorageAllowResponse, error)
	PeerVolumeAllow(ctx context.Context, in *PeerVolumeAllowRequest, opts ...grpc.CallOption) (*PeerVolumeAllowResponse, error)
}

type controlClient struct {
	cc *grpc.ClientConn
}

func NewControlClient(cc *grpc.ClientConn) ControlClient {
	return &controlClient{cc}
}

func (c *controlClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/bazil.control.Control/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlClient) PublicKeyGet(ctx context.Context, in *PublicKeyGetRequest, opts ...grpc.CallOption) (*PublicKeyGetResponse, error) {
	out := new(PublicKeyGetResponse)
	err := c.cc.Invoke(ctx, "/bazil.control.Control/PublicKeyGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlClient) VolumeCreate(ctx context.Context, in *VolumeCreateRequest, opts ...grpc.CallOption) (*VolumeCreateResponse, error) {
	out := new(VolumeCreateResponse)
	err := c.cc.Invoke(ctx, "/bazil.control.Control/VolumeCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlClient) VolumeConnect(ctx context.Context, in *VolumeConnectRequest, opts ...grpc.CallOption) (*VolumeConnectResponse, error) {
	out := new(VolumeConnectResponse)
	err := c.cc.Invoke(ctx, "/bazil.control.Control/VolumeConnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlClient) VolumeMount(ctx context.Context, in *VolumeMountRequest, opts ...grpc.CallOption) (*VolumeMountResponse, error) {
	out := new(VolumeMountResponse)
	err := c.cc.Invoke(ctx, "/bazil.control.Control/VolumeMount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlClient) VolumeStorageAdd(ctx context.Context, in *VolumeStorageAddRequest, opts ...grpc.CallOption) (*VolumeStorageAddResponse, error) {
	out := new(VolumeStorageAddResponse)
	err := c.cc.Invoke(ctx, "/bazil.control.Control/VolumeStorageAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlClient) VolumeSync(ctx context.Context, in *VolumeSyncRequest, opts ...grpc.CallOption) (*VolumeSyncResponse, error) {
	out := new(VolumeSyncResponse)
	err := c.cc.Invoke(ctx, "/bazil.control.Control/VolumeSync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlClient) SharingKeyAdd(ctx context.Context, in *SharingKeyAddRequest, opts ...grpc.CallOption) (*SharingKeyAddResponse, error) {
	out := new(SharingKeyAddResponse)
	err := c.cc.Invoke(ctx, "/bazil.control.Control/SharingKeyAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlClient) PeerAdd(ctx context.Context, in *PeerAddRequest, opts ...grpc.CallOption) (*PeerAddResponse, error) {
	out := new(PeerAddResponse)
	err := c.cc.Invoke(ctx, "/bazil.control.Control/PeerAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlClient) PeerLocationSet(ctx context.Context, in *PeerLocationSetRequest, opts ...grpc.CallOption) (*PeerLocationSetResponse, error) {
	out := new(PeerLocationSetResponse)
	err := c.cc.Invoke(ctx, "/bazil.control.Control/PeerLocationSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlClient) PeerStorageAllow(ctx context.Context, in *PeerStorageAllowRequest, opts ...grpc.CallOption) (*PeerStorageAllowResponse, error) {
	out := new(PeerStorageAllowResponse)
	err := c.cc.Invoke(ctx, "/bazil.control.Control/PeerStorageAllow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlClient) PeerVolumeAllow(ctx context.Context, in *PeerVolumeAllowRequest, opts ...grpc.CallOption) (*PeerVolumeAllowResponse, error) {
	out := new(PeerVolumeAllowResponse)
	err := c.cc.Invoke(ctx, "/bazil.control.Control/PeerVolumeAllow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControlServer is the server API for Control service.
type ControlServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	PublicKeyGet(context.Context, *PublicKeyGetRequest) (*PublicKeyGetResponse, error)
	VolumeCreate(context.Context, *VolumeCreateRequest) (*VolumeCreateResponse, error)
	VolumeConnect(context.Context, *VolumeConnectRequest) (*VolumeConnectResponse, error)
	VolumeMount(context.Context, *VolumeMountRequest) (*VolumeMountResponse, error)
	VolumeStorageAdd(context.Context, *VolumeStorageAddRequest) (*VolumeStorageAddResponse, error)
	VolumeSync(context.Context, *VolumeSyncRequest) (*VolumeSyncResponse, error)
	SharingKeyAdd(context.Context, *SharingKeyAddRequest) (*SharingKeyAddResponse, error)
	PeerAdd(context.Context, *PeerAddRequest) (*PeerAddResponse, error)
	PeerLocationSet(context.Context, *PeerLocationSetRequest) (*PeerLocationSetResponse, error)
	PeerStorageAllow(context.Context, *PeerStorageAllowRequest) (*PeerStorageAllowResponse, error)
	PeerVolumeAllow(context.Context, *PeerVolumeAllowRequest) (*PeerVolumeAllowResponse, error)
}

func RegisterControlServer(s *grpc.Server, srv ControlServer) {
	s.RegisterService(&_Control_serviceDesc, srv)
}

func _Control_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bazil.control.Control/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Control_PublicKeyGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicKeyGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).PublicKeyGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bazil.control.Control/PublicKeyGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).PublicKeyGet(ctx, req.(*PublicKeyGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Control_VolumeCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).VolumeCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bazil.control.Control/VolumeCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).VolumeCreate(ctx, req.(*VolumeCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Control_VolumeConnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeConnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).VolumeConnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bazil.control.Control/VolumeConnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).VolumeConnect(ctx, req.(*VolumeConnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Control_VolumeMount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeMountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).VolumeMount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bazil.control.Control/VolumeMount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).VolumeMount(ctx, req.(*VolumeMountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Control_VolumeStorageAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeStorageAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).VolumeStorageAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bazil.control.Control/VolumeStorageAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).VolumeStorageAdd(ctx, req.(*VolumeStorageAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Control_VolumeSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeSyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).VolumeSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bazil.control.Control/VolumeSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).VolumeSync(ctx, req.(*VolumeSyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Control_SharingKeyAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SharingKeyAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).SharingKeyAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bazil.control.Control/SharingKeyAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).SharingKeyAdd(ctx, req.(*SharingKeyAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Control_PeerAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeerAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).PeerAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bazil.control.Control/PeerAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).PeerAdd(ctx, req.(*PeerAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Control_PeerLocationSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeerLocationSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).PeerLocationSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bazil.control.Control/PeerLocationSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).PeerLocationSet(ctx, req.(*PeerLocationSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Control_PeerStorageAllow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeerStorageAllowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).PeerStorageAllow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bazil.control.Control/PeerStorageAllow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).PeerStorageAllow(ctx, req.(*PeerStorageAllowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Control_PeerVolumeAllow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeerVolumeAllowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).PeerVolumeAllow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bazil.control.Control/PeerVolumeAllow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).PeerVolumeAllow(ctx, req.(*PeerVolumeAllowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Control_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bazil.control.Control",
	HandlerType: (*ControlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Control_Ping_Handler,
		},
		{
			MethodName: "PublicKeyGet",
			Handler:    _Control_PublicKeyGet_Handler,
		},
		{
			MethodName: "VolumeCreate",
			Handler:    _Control_VolumeCreate_Handler,
		},
		{
			MethodName: "VolumeConnect",
			Handler:    _Control_VolumeConnect_Handler,
		},
		{
			MethodName: "VolumeMount",
			Handler:    _Control_VolumeMount_Handler,
		},
		{
			MethodName: "VolumeStorageAdd",
			Handler:    _Control_VolumeStorageAdd_Handler,
		},
		{
			MethodName: "VolumeSync",
			Handler:    _Control_VolumeSync_Handler,
		},
		{
			MethodName: "SharingKeyAdd",
			Handler:    _Control_SharingKeyAdd_Handler,
		},
		{
			MethodName: "PeerAdd",
			Handler:    _Control_PeerAdd_Handler,
		},
		{
			MethodName: "PeerLocationSet",
			Handler:    _Control_PeerLocationSet_Handler,
		},
		{
			MethodName: "PeerStorageAllow",
			Handler:    _Control_PeerStorageAllow_Handler,
		},
		{
			MethodName: "PeerVolumeAllow",
			Handler:    _Control_PeerVolumeAllow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bazil.org/bazil/server/control/wire/control.proto",
}
